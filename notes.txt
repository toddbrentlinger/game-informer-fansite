TODO:

8/18/22

- Add separate slug field for special episodes (ReplayEpisode and SuperReplayEpisode) to add to 
end of special url which would be different than default Episode slug. 
EX: 
/super-replay/overblood/2 -> /episodes/super-replay-overblood-episode-2
/replay/metal-gear-solid -> /episodes/replay-metal-gear-solid

7/25/22

- Change 'host' field in Episode abstract model from ForeignKey to ManyToManyField 
since multiple people can be host in a single episode.

X ISSUE: IGDB creates API access token every time a ReplayEpisode is 
created inside data migration script. 
SOLUTION: Create API access token once and pass as parameter into function 
inside data migration script.

7/22/22

Show(Model):
    name = CharField()
    description = TextField()
    slug = SlugField()

ShowEpisode(Episode):
    show = ForeignKey(Show)
    youtube_video = ForeignKey|OneToOneField(YouTubeVideo)

Super Replay Special Case:
- Show instance of 'Super Replay'
- ShowEpisode instances of every Super Replay Episode

SuperReplay(Model): # Extend Show?
    name = CharField()
    # Do NOT need show since show type is set inside ShowEpisode

SuperReplayEpisode(Model): # Extend ShowEpisode?
    super_replay = ForeignKey(SuperReplay)
    episode = OneToOne(ShowEpisode)

- GI Live
    /gi-live/
    /gilive/
- GI Show - Game Informer Show
    /gi-show/
    /gishow/
- Spoiled
    /spoiled/
- Extra Life
    /extra-life/

- Add detail page for games with NO platforms, developers, etc. Any field that can be blank.

- When use general search on header, display first 10 matches from each map AND links to see 
the remaining search results in app specific search results page. Ex. ./search/?q=splinter will 
display max 10 results from each app. Clicking to see remaining Game results goes to 
./games/search/?q=splinter
Alternative to having separate pagination funcionality to page through each app results on same search
page.

7/19/22

X Change developer field in Game to ManyToManyField to add multiple developers to single Game
instead of using the first one listed.

X Some games could be played on multiple platforms but only save the first one.
Change platform field in Game to ManyToManyField. When matching game is found using 
name or id, add platform if doesn't already exist in M2M field.

- If must take platform data from game data returned from IGDB request, use the platform 
with the earliest release date instead of the first in the list.

Developer
    X description
    X start_date
    X websites?
Publisher? (same as developer)
Platform
    X generation (int)
    X websites?

7/10/22

X Add Fandom link to external links field

- If NO games returned in segment.games during data migration,
use 'description' field instead as backup.

6/29/22

X Add 'collection' or 'franchise' field to Game and in game detail page, show same series games.
IGDB Fields To Consider:
    X artworks
    X videos

    X collection
    X franchise
    X franchises

    X keywords
    tags
    X themes
    * Abstract model with same shared functionality as Genre

    X websites

- Show related Games played in game detail page using fields genres, etc.

X Save Article.content as JSON object to hold array of strings representing each 
paragraph of article.
SOLUTION: Instead, join array of strings with '\n\n' before saving it to TextField.

X Account for game titles in segments with platform in parentheses at end of game title.

6/25/22

- Data Migration:
Create Game instances from each main_segment_games property of JSON and then 
save 'game_id' to each main_segment_games object before running through each 
episode again to create the ReplayEpisode instance. When get to main_segment_games, 
use 'game_id' to query the already create Game instance before saving it to the 
episode.

|- accounts
|- config
|- fansite
|- games (games/ , games/platforms/ , games/developers/ , )
|- people (people/ , people/staff/ or staff/ , people/guests/ or guests/)
|- replay (replay/ , replay/segments/ , )
|- superreplay (NOTE: Could be inside 'replay' app instead. SuperReplayEpisode 
                and ReplayEpisode can both derive from Episode which has common 
                functionality.)

- games, people, replay, superreplay
Apps that each have page to search/sort/filter each main model of that app.
Can also view detail pages about each entry.

6/22/22

X Remove UUID fields from objects where built-in default 'id' primary key
is adequate. ReplayEpisode, etc.

- Change youtube_id field in YouTubeVideo to just id?

X Add slug field to any model with a detail page. Built-in methods to convert to slug.
Must have unique attribute.

- Add JSON field to ReplayEpisode to hold the original JSON object used to create 
the model instance.

X In data migration script, go through all main segment games first to add 
to the database before going through other segments. Can then as much data 
as possible (title, platform, year released) to find games using IGDB before 
potentially the same games occur in different segments where more data is 
NOT provided.
SOLUTION: Only a few instances where a game is played in segment BEFORE being 
played in the main segment of another episode. Best to just go through each episode 
in order of airdate (most current last) instead of reverse airdate (most current 
first) by default.

6/21/22

X Add slug field to Person, SegmentType, ReplayEpisode (or Episode) models used for url routing.
Need to migrate again and incorporate new fields in data migration script.

3/22/22

- ISSUE: Game instances haves wrong release date.
X ISSUE: SegmentType __str__ has produces issues inside Admin site or ReplayEpisode and ReplaySeason
- ISSUE: There is a SegmentType with blank title. Need to re-run data migration after fix.

3/6/22

- Create separate apps for 'replays' and 'superreplays'

-------------------------------------------------------------------------------

Reset PostgreSQL database:

- Delete files in <app-title>/migrations/ except those that start with "__init__"

- Open SQL Shell (psql) and login to database using user, password, and port.
    DROP DATABASE dbname;
    CREATE DATABASE dbname;

- Re-create migrations.
    python manage.py makemigrations
    python manage.py migrate

- Superuser was removed. Must add it again.
    python manage.py createsuperuser

-------------------------------------------------------------------------------

Data Migration:

from django.db import migrations
from django.contrib.postgres.operations import TrigramExtension, UnaccentExtension
from utilities.replay_data_migration import initialize_database as replay_init
from utilities.super_replay_data_migration import initialize_database as super_replay_init

class Migration(migrations.Migration):

    dependencies = [
        ('games', '0003_remove_game_developer_remove_game_platform_and_more'),
        ('people', '0002_initial'),
        ('replay', '0001_initial'),
        ('shows', '0001_initial'),
        ('superreplay', '0001_initial'),
    ]

    operations = [
        TrigramExtension(),
        UnaccentExtension(),
        migrations.RunPython(replay_init),
        migrations.RunPython(super_replay_init),
    ]

-------------------------------------------------------------------------------

JSON file changes:

.09 - Splatterhouse: Wanpaku Grafitti -> Splatterhouse: Wanpaku Graffiti
  1 - secondSegmentGames: ["Critical Depth, Rogue Trip: Vacation 2012"] -> ["Critical Depth", "Rogue Trip: Vacation 2012"]

-------------------------------------------------------------------------------

- How to account for choices not having an appropriate choice?
Create separate model for the choices where a new one can be added.

- Should Episode.id be 'editable'?

- YouTubeVideo.thumbnails should use a default thumbnail referenced by the pk value. Perhaps it should be 
the first thumbnail instanced added to the database with pk=0

- Runtime AND Airdate in Episode could instead be used in YouTubeVideo.

X Replace PositiveIntegerField with PositiveSmallIntegerField
Small Integer limit is 32767

- Could I use ImageField built-in model for Thumbnail?

- Host/Featuring: For new Featuring entries, check that each Staff is NOT already listed in Host position

App Structure:
- staff
    - DetailView
    - ListView
- game
    - DetailView
    - ListViewp
- replay
    - DetailView
    - ListView
- superreplay
    - DetailView
    - ListView
- testchamber
    - DetailView
    - ListView

- ISSUE: Some models like Game, Staff, etc. are shared between each app. 
Should I just create them in one and import in the others 
OR create a base app to hold any shared models and import them into other apps?
Maybe all apps with shared models should be in combined into single app OR create 
separate app for each of those shared models since they each need their own DetailView 
and ListView also.