# Generated by Django 4.0.1 on 2022-01-26 20:23

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Enter article title.', max_length=100)),
                ('datetime', models.DateTimeField(help_text='Enter date and time article was published.')),
                ('content', models.TextField(help_text='Enter main content of article.')),
            ],
            options={
                'ordering': ['-datetime'],
            },
        ),
        migrations.CreateModel(
            name='ExternalLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(help_text='Enter URL of external link.')),
                ('title', models.CharField(help_text='Enter display title of external link.', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Enter game title.', max_length=100)),
                ('system', models.CharField(choices=[('PC', 'PC'), ('PS4', 'PlayStation 4'), ('X360', 'XBox 360')], help_text='Enter game system (ex. PC, PS4, XBox 360, etc.).', max_length=10)),
                ('release_date', models.DateField(help_text='Enter date the game was released.', verbose_name='release Date')),
            ],
            options={
                'ordering': ['title', 'release_date'],
            },
        ),
        migrations.CreateModel(
            name='Guest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(help_text='Enter first name.', max_length=100, verbose_name='first Name')),
                ('last_name', models.CharField(blank=True, help_text='Enter last name.', max_length=100, verbose_name='last Name')),
            ],
            options={
                'ordering': ['last_name', 'first_name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Heading',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Enter heading title.', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Segment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Enter title of segment.', max_length=100)),
                ('abbreviation', models.CharField(blank=True, help_text='Enter shortened abbreviation of segment title.', max_length=10)),
                ('description', models.CharField(blank=True, help_text='Enter description of segment.', max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(help_text='Enter first name.', max_length=100, verbose_name='first Name')),
                ('last_name', models.CharField(blank=True, help_text='Enter last name.', max_length=100, verbose_name='last Name')),
            ],
            options={
                'ordering': ['last_name', 'first_name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StaffRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Enter title of professional role.', max_length=200)),
                ('start_date', models.DateField(help_text='Enter date started the position.')),
                ('end_date', models.DateField(help_text='Enter date started the position.')),
            ],
            options={
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='SuperReplay',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Thumbnail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quality', models.CharField(choices=[('DEFAULT', 'Default'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('STANDARD', 'Standard'), ('MAXRES', 'Maxres')], help_text='Enter quality of thumbnail.', max_length=20)),
                ('url', models.URLField(help_text='Enter URL of thumbnail.')),
                ('width', models.PositiveSmallIntegerField(help_text='Enter width of thumbnail')),
                ('height', models.PositiveSmallIntegerField(help_text='Enter height of thumbnail')),
            ],
        ),
        migrations.CreateModel(
            name='YouTubeVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('youtube_id', models.CharField(blank=True, help_text='Enter YouTube video ID', max_length=15, verbose_name='video ID')),
                ('views', models.PositiveBigIntegerField(blank=True, help_text='Enter number of views.', null=True)),
                ('likes', models.PositiveIntegerField(blank=True, help_text='Enter number of likes.', null=True)),
                ('dislikes', models.PositiveIntegerField(blank=True, help_text='Enter the number of dislikes.', null=True)),
                ('thumbnails', models.ManyToManyField(help_text='Enter thumbnail images for the video.', to='fansite.Thumbnail')),
            ],
        ),
        migrations.CreateModel(
            name='SuperReplayEpisode',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Enter episode title.', max_length=100)),
                ('runtime', models.PositiveIntegerField(blank=True, help_text='Enter episode runtime as number of seconds.')),
                ('airdate', models.DateField(help_text='Enter original date the episode first aired.')),
                ('external_links', models.ManyToManyField(blank=True, help_text='Enter any external URL links (NOT including Game Informer article OR YouTube video).', null=True, to='fansite.ExternalLink', verbose_name='external Links')),
                ('featuring', models.ManyToManyField(blank=True, help_text='Enter staff members who feature in the episode (NOT including the host).', null=True, related_name='%(app_label)s_%(class)s_featuring_related', related_query_name='%(app_label)s_%(class)ss_featuring', to='fansite.Staff')),
                ('guests', models.ManyToManyField(blank=True, help_text='Enter any other guests (NOT official staff members).', null=True, to='fansite.Guest')),
                ('host', models.ForeignKey(blank=True, help_text='Enter staff member who hosts the episode.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_host_related', related_query_name='%(app_label)s_%(class)ss_host', to='fansite.staff')),
                ('super_replay', models.ForeignKey(help_text='Enter Super Replay for this episode.', on_delete=django.db.models.deletion.CASCADE, to='fansite.superreplay')),
                ('thumbnails', models.ManyToManyField(help_text='Enter thumbnail images for the episode.', to='fansite.Thumbnail')),
                ('youtube_video', models.ForeignKey(blank=True, help_text='Enter the YouTube video for the episode.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='fansite.youtubevideo', verbose_name='youTube Video')),
            ],
            options={
                'ordering': ['airdate'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='staff',
            name='roles',
            field=models.ManyToManyField(help_text='Enter professional positions for staff member.', to='fansite.StaffRole'),
        ),
        migrations.CreateModel(
            name='SegmentInstance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='Unique ID for this particular segment instance.', primary_key=True, serialize=False)),
                ('content', models.TextField(blank=True, help_text='Enter content description of this segment instance.')),
                ('games', models.ManyToManyField(blank=True, help_text='Enter games played during the segment.', null=True, to='fansite.Game')),
                ('segment', models.ForeignKey(help_text='Enter type of segment.', on_delete=django.db.models.deletion.PROTECT, to='fansite.segment')),
            ],
        ),
        migrations.CreateModel(
            name='ReplayEpisode',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Enter episode title.', max_length=100)),
                ('runtime', models.PositiveIntegerField(blank=True, help_text='Enter episode runtime as number of seconds.')),
                ('airdate', models.DateField(help_text='Enter original date the episode first aired.')),
                ('number', models.SmallIntegerField(help_text='Enter Replay episode number (unofficial episodes use negative numbers).', unique=True)),
                ('article', models.OneToOneField(blank=True, help_text='Enter article for the Replay episode.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='fansite.article')),
                ('external_links', models.ManyToManyField(blank=True, help_text='Enter any external URL links (NOT including Game Informer article OR YouTube video).', null=True, to='fansite.ExternalLink', verbose_name='external Links')),
                ('featuring', models.ManyToManyField(blank=True, help_text='Enter staff members who feature in the episode (NOT including the host).', null=True, related_name='%(app_label)s_%(class)s_featuring_related', related_query_name='%(app_label)s_%(class)ss_featuring', to='fansite.Staff')),
                ('guests', models.ManyToManyField(blank=True, help_text='Enter any other guests (NOT official staff members).', null=True, to='fansite.Guest')),
                ('host', models.ForeignKey(blank=True, help_text='Enter staff member who hosts the episode.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_host_related', related_query_name='%(app_label)s_%(class)ss_host', to='fansite.staff')),
                ('main_segment_games', models.ManyToManyField(help_text='Enter any games part of the main segment of the Replay episode.', to='fansite.Game', verbose_name='main Segment Games')),
                ('middle_segment', models.ForeignKey(blank=True, help_text='Enter middle segment for the Replay episode.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_middle_segment_related', to='fansite.segmentinstance', verbose_name='middle Segment')),
                ('second_segment', models.ForeignKey(blank=True, help_text='Enter second segment for the Replay episode.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_second_segment_related', to='fansite.segmentinstance', verbose_name='second Segment')),
                ('thumbnails', models.ManyToManyField(help_text='Enter thumbnail images for the episode.', to='fansite.Thumbnail')),
                ('youtube_video', models.ForeignKey(blank=True, help_text='Enter the YouTube video for the episode.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='fansite.youtubevideo', verbose_name='youTube Video')),
            ],
            options={
                'ordering': ['-airdate'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HeadingInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('heading', models.ForeignKey(help_text='Enter heading type.', on_delete=django.db.models.deletion.PROTECT, to='fansite.heading')),
            ],
        ),
        migrations.AddField(
            model_name='article',
            name='author',
            field=models.ForeignKey(blank=True, help_text='Enter staff who authored the article.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='fansite.staff'),
        ),
    ]
