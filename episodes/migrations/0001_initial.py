# Generated by Django 4.0.1 on 2022-08-19 02:11

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ExternalLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(help_text='Enter URL of external link.', verbose_name='URL')),
                ('title', models.CharField(help_text='Enter display title of external link.', max_length=100)),
            ],
            options={
                'verbose_name': 'External Link',
            },
        ),
        migrations.CreateModel(
            name='Thumbnail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quality', models.CharField(choices=[('DEFAULT', 'Default'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('STANDARD', 'Standard'), ('MAXRES', 'Maxres')], default='DEFAULT', help_text='Enter quality of thumbnail.', max_length=20)),
                ('url', models.URLField(help_text='Enter URL of thumbnail.', unique=True, verbose_name='URL')),
                ('width', models.PositiveSmallIntegerField(help_text='Enter width of thumbnail')),
                ('height', models.PositiveSmallIntegerField(help_text='Enter height of thumbnail')),
            ],
        ),
        migrations.CreateModel(
            name='YouTubeVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('youtube_id', models.CharField(blank=True, help_text='Enter YouTube video ID.', max_length=15, verbose_name='Video ID')),
                ('title', models.CharField(help_text='Enter title of the video.', max_length=100)),
                ('views', models.PositiveBigIntegerField(blank=True, help_text='Enter number of views.', null=True)),
                ('likes', models.PositiveIntegerField(blank=True, help_text='Enter number of likes.', null=True)),
                ('dislikes', models.PositiveIntegerField(blank=True, help_text='Enter the number of dislikes.', null=True)),
                ('description', models.TextField(blank=True, help_text='Enter description of the video.')),
                ('tags', models.JSONField(blank=True, help_text='Enter tags for the video.', null=True)),
                ('duration', models.CharField(blank=True, help_text='Enter video duration in format: ex. PT1H34M35S.', max_length=11)),
                ('published_at', models.DateField(blank=True, help_text='Enter date the YouTube video was published.', null=True)),
                ('last_updated', models.DateField(auto_now=True)),
                ('thumbnails', models.ManyToManyField(help_text='Enter thumbnail images for the video.', to='episodes.Thumbnail')),
            ],
            options={
                'verbose_name': 'YouTube Video',
            },
        ),
        migrations.CreateModel(
            name='Episode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Enter title of the episode.', max_length=100)),
                ('headings', models.JSONField(blank=True, help_text='Enter JSON of different headings with key being the heading title and value being the content.', null=True)),
                ('slug', models.SlugField(help_text='Enter a url-safe, unique, lower-case version of the episode.', max_length=100, unique=True)),
                ('runtime', models.CharField(blank=True, help_text='Enter episode runtime in format hh:mm:ss.', max_length=11)),
                ('airdate', models.DateField(help_text='Enter original date the episode first aired.')),
                ('external_links', models.ManyToManyField(blank=True, help_text='Enter any external URL links (NOT including YouTube video).', to='episodes.ExternalLink', verbose_name='External Links')),
            ],
            options={
                'ordering': ['-airdate'],
            },
        ),
    ]
